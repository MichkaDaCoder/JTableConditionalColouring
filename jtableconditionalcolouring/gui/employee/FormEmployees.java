package jtableconditionalcolouring.gui.employee;

import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import static javax.swing.JFrame.EXIT_ON_CLOSE;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import jtableconditionalcolouring.dao.EmployeeImplementation;
import jtableconditionalcolouring.model.Employee;
import jtableconditionalcolouring.reports.JasperImplementation;
import jtableconditionalcolouring.utils.EmployeesTableModel;
import jtableconditionalcolouring.utils.JFrameUtils;
import net.sf.jasperreports.engine.JRException;

/**
 * FormEmployees.java: main form of the application.
 *
 * @author MichkaDaCoder
 */
public class FormEmployees extends javax.swing.JFrame {

    final EmployeeImplementation empImpl = new EmployeeImplementation();
    Employee employee = new Employee();
    JasperImplementation jasperImpl = new JasperImplementation();

    int index = 0;

    int confirm;

    /**
     * Getter of Employee class
     *
     * @return <b>Employee</b>
     */
    public Employee getEmployee() {
        return employee;
    }

    /**
     * Setter of Employee class.
     *
     * @param employee
     */
    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    /**
     * Getter of index
     *
     * @return <b>int</b>
     */
    public int getIndex() {
        return index;
    }

    /**
     * Setter of index.
     *
     * @param index
     */
    public void setIndex(int index) {
        this.index = index;
    }

    /**
     * Getter of EmployeeImplementation class
     *
     * @return <b>EmployeeImplementation</b>
     */
    public EmployeeImplementation getEmpImpl() {
        return empImpl;
    }

    /**
     * Getter of JasperImplementation class
     *
     * @return <b>JasperImplementation</b>
     */
    public JasperImplementation getJasperImpl() {
        return jasperImpl;
    }

    /**
     * Binds the JTable from the model class <b>EmployeesTableModel</b>
     */
    public void bindTable() {
        EmployeesTableModel mtm = new EmployeesTableModel(empImpl.findEmployees());
        tableEmployees.setModel(mtm);

        for (int i = 0; i < mtm.getColumnCount(); i++) {
            tableEmployees.setDefaultRenderer(tableEmployees.getColumnClass(i), new EmployeeCellRenderer());
        }
    }

    /**
     * Creates new form FormEmployees.
     */
    public FormEmployees() {
        initComponents();

        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        try {
            bindTable();
        } catch (Exception ex) {
            JFrameUtils.showErrorMessage(ex.getMessage(), ex.getClass().getName());
        }

        try {
            empImpl.connexion();
        } catch (NullPointerException | IOException ex) {
            JFrameUtils.showErrorMessage(ex.getMessage(), ex.getClass().getName());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        CJTable_PUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("CJTable_PU").createEntityManager();
        employeeQuery = java.beans.Beans.isDesignTime() ? null : CJTable_PUEntityManager.createQuery("SELECT e FROM Employee e");
        employeeList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : employeeQuery.getResultList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEmployees = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btn_generateReport = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JPA&SQLite Example with JTabe Conditional coloring");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 28)); // NOI18N
        jLabel1.setText("List of Employees details");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 10, -1, -1));

        tableEmployees.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        tableEmployees.setColumnSelectionAllowed(true);
        tableEmployees.setGridColor(new java.awt.Color(204, 204, 204));
        tableEmployees.setRowHeight(20);
        tableEmployees.setRowMargin(1);
        tableEmployees.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tableEmployees.setShowHorizontalLines(true);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, employeeList, tableEmployees);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${id}"));
        columnBinding.setColumnName("ID");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${firstName}"));
        columnBinding.setColumnName("First name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${lastName}"));
        columnBinding.setColumnName("Last name");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${salary}"));
        columnBinding.setColumnName("Salary");
        columnBinding.setColumnClass(Integer.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${email}"));
        columnBinding.setColumnName("Email");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hiredate}"));
        columnBinding.setColumnName("Hiredate");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${address}"));
        columnBinding.setColumnName("Address");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(tableEmployees);
        tableEmployees.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 770, 170));

        jButton1.setText("New Employee");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, -1, -1));

        btn_generateReport.setText("Generate Report");
        btn_generateReport.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_generateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_generateReportActionPerformed(evt);
            }
        });
        getContentPane().add(btn_generateReport, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 230, -1, -1));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("* Employees who have salary < 5000 are marked with Red");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        bindingGroup.bind();

        setSize(new java.awt.Dimension(801, 354));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (evt.getSource() == jButton1) {
            new FormEmployeesAdd().setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Button event for generating a JasperReport's report.
     * @param evt
     */
    private void btn_generateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_generateReportActionPerformed
        // TODO add your handling code here:

        if (evt.getSource() == btn_generateReport) {
            try {
                getJasperImpl().PDF();
            } catch (JRException | IOException ex) {
                JFrameUtils.showErrorMessage(ex.getMessage(), ex.toString());
            }
        }
    }//GEN-LAST:event_btn_generateReportActionPerformed

    /**
     * Managed event of form closing.
     * @param evt
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:

        this.confirm = JFrameUtils.showConfirmMessage(JFrameUtils.getBundleParam(JFrameUtils.getPROPERTIES_FILE(), "PARAM_CONFIRM_EXIT"), "Confirm");

        switch (this.confirm) {
            case 0x0:
                System.exit(0x0);
                break;

            case 0x1:
                setDefaultCloseOperation(0x0);
                break;
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormEmployees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FormEmployees().setVisible(true);
            }
        });
    }

    /**
     * EmployeeCellRenderer.java: Class for managing JTable components
     * rendering. Extends DefaultTableCellRendered
     */
    class EmployeeCellRenderer extends DefaultTableCellRenderer {

        public EmployeeCellRenderer() {
            super();
        }

        /**
         * Method of rendering cells of Employes JTable.
         *
         * @param table
         * @param value
         * @param isSelected
         * @param hasFocus
         * @param row
         * @param column
         * @return <b>Component</b>
         */
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            EmployeesTableModel etm = (EmployeesTableModel) tableEmployees.getModel();
            Employee employee = (Employee) etm.getValueAtRow(row);

            if (employee.getSalary() < 5000) {
                setBackground(Color.red);
                setForeground(Color.WHITE);
            } else {
                setBackground(Color.white);
                setForeground(Color.BLACK);
            }
            
            if(value instanceof Date) {
                
            }
            return super.getTableCellRendererComponent(table, value, isSelected,
                    hasFocus, row, column);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.persistence.EntityManager CJTable_PUEntityManager;
    private javax.swing.JButton btn_generateReport;
    private java.util.List<jtableconditionalcolouring.model.Employee> employeeList;
    private javax.persistence.Query employeeQuery;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableEmployees;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
